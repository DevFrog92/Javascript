// 변수 선언

// var, let, const (let과 const는 ES6부터 도입되었다.)
// var : 함수 레벨 스코프(function-level scope)
// let, const : 블록 레벨 스코프(block-level scope)

// var 키워드를 사용한 변수 선언은 선언 단계와 초기화 단계가 동시에 진행된다.
// 초기화 하지 않으면 garbage value에 의해서 정확한 값을 참조하지 못하는 경우가 발생한다.

// 변수 선언의 실행 시점과 변수 호이스팅

// 1. 변수 선언문보다 변수를 참조하는 코드가 앞에 있다. 자바스크립트는 인터프리터에 의해 한 줄씩 순차적으로 실행되므로 console.log에서 score를 참조하는 순간
// ReferenceError가 발생해야 하지만 undefined가 출력된다.
// 그 이유는 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시검, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.
// 자바스크립트는 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비단계를 거치게된다.
// 이 과정속에서 자바스크립트는 변수 선언 및 모든 선언문을 찾아 먼저 실행시킨다.
// 선언문을 모두 실행시킨 뒤 바로 선언문을 제외한 모든 구문을 실행하게 된다.
// 이처럼 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 호이스팅(Hoisting)이라고 한다.
// console.log(score);

// var score;

// 2. 변수 선언과 값의 할당의 실행 시점이 다르다.
// 변수 선언은 코드를 평가하는 시점 즉 런타임 이전에 선언되며, 할당은 런타임 시 할당된다.

console.log(score);

score = 80;

var score;

console.log(score); // 마지막의 값은 무엇일까? 80

// 자바스크립트는 런타임시 선언문을 실행하지 않기 때문에 30번째 줄은 넘어갈 것이다. 그렇기 때문에 할당이 실행되고 32번째 줄은 80을 출력할 것이다.

// 3. 재할당 : var 키워드로 선언한 변수는 재할당이 가능하다.
// 변수에 값이 재 할당되면 이전의 값이 저장되어 있는 메모리 공간을 지우고 그 메모리 공간에 새롭게 값을 할당하는 것이 아니라, 새로운 메모리 공간을 확보하고 그 메모리 공간에 새로운 값을 할당한다.
// 이렇게 어떤 식별자도 연결되어 있지 않는 메모리 공간의 경우 가비지 콜렉터에 의해 메모리에서 자동 해제된다. 단, 메모리에서 해제되는 시점을 예측할 수 없다. 가바지 콜렉터는 애플리케이션이 할당(allocate)한 메모리 공간을 주기적으로 검사하여
// 어떤 식별자도 참조하지 않는 더 이상 사용되지 않는 메모리를 해제(release)한다. 자바스크립트는 가비지 콜렉터를 내장하고 있는 매니지드 언어로서 가비지 콜렉터를 통해 메모리 누수를 방지한다.
// 매니지드 언어와 언매니지드 언어
// 프로그래밍 언어는 메모리 관리 방식에 따라 언매니지드 언어와 매니지드 언어로 나뉘게 된다.
// 언매니지드 언어는 메모리 제어를 개발자가 주도할 수 있으므로 개발자의 역량에 따하 최적의 성능을 확보할 수 있지만 그 반대의 경우 치명적인 오류를 생산할 수 있다.
// 매니지드 언어는 메모리의 할당 및 해제를 위한 메모리 관리 기능을 언어 차원에서 담당하고 개잘자의 직접적인 메모리 제어를 허용하지 않는다.